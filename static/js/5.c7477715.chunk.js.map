{"version":3,"sources":["resources/img/mjolnir.png","components/randomChar/RandomChar.js","components/charList/CharList.js","components/skeleton/Skeleton.js","components/charInfo/CharInfo.js","components/errorBoundary/ErrorBoundary.js","components/charSearchForm/CharSearchForm.js","resources/img/vision.png","components/pages/MainPage.js","components/errorMessage/error.gif","components/errorMessage/ErrorMessage.js","services/MarvelService.js","hooks/http.hook.js"],"names":["View","char","name","descr","thumbnail","homepage","wiki","styleImgNotFound","objectFit","className","src","alt","style","href","RandomChar","useState","setChar","useMarvelService","loading","error","getCharacter","clearError","useEffect","updateChare","timerId","setInterval","clearInterval","onCharLoaded","id","Math","floor","random","then","errorMessage","ErrorMessage","spinner","Spinner","content","onClick","mjolnir","CharList","props","charList","setCharList","newItemLoading","setnewItemLoading","offset","setOffset","charEnded","setCharEnded","getAllCharacters","onRequest","initial","onCharListLoaded","newCharList","ended","length","itemRefs","useRef","focusOnItem","current","forEach","item","classList","remove","add","focus","items","arr","map","i","imgStyle","CSSTransition","timeout","classNames","tabIndex","ref","el","onCharSelected","onKeyPress","e","key","TransitionGroup","component","renderItems","disabled","Skeleton","comics","CharInfo","charId","skeleton","ErrorBoundary","state","errorInfo","this","setState","true","children","Component","CharSearchForm","console","log","getCharacterByName","results","to","initialValues","charName","validationSchema","Yup","required","onSubmit","htmlFor","type","placeholder","MainPage","selectedChar","decoration","display","width","height","margin","errorImg","setLoading","setError","request","useCallback","url","method","body","headers","fetch","response","ok","Error","status","json","data","message","useHttp","_apiBase","_apiKey","a","res","_transformCharacter","getAllComics","_transformComics","getComic","description","slice","path","extension","urls","title","pageCount","language","textObjects","price","prices"],"mappings":"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","file":"static/js/5.c7477715.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/mjolnir.61f31e18.png\";","import { useState, useEffect } from 'react';\nimport './randomChar.scss';\n\n\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport useMarvelService from '../../services/MarvelService';\nimport mjolnir from '../../resources/img/mjolnir.png';\n\nconst RandomChar = () => {\n\n    const [char, setChar] = useState({});\n    \n    const {loading, error, getCharacter, clearError} = useMarvelService();\n\n\n    useEffect(() => {\n        updateChare();\n        const timerId = setInterval(updateChare, 30000);\n\n        return () => {\n            clearInterval(timerId);\n        }\n    }, []);\n\n    const onCharLoaded = (char) => {\n        setChar(char);\n    };\n\n    function updateChare () {\n        clearError();\n        const id = Math.floor(Math.random() * (1011400 - 1011000) + 1011000);\n        getCharacter(id)\n            .then(onCharLoaded)\n    };\n\n\n    const errorMessage = error ? <ErrorMessage /> : null;\n    const spinner = loading ? <Spinner /> : null;\n    const content = !(loading || error) ? <View char={char} /> : null;\n\n\n    return (\n\n        <div className=\"randomchar\">\n            {errorMessage}\n            {spinner}\n            {content}\n            <div className=\"randomchar__static\">\n                <p className=\"randomchar__title\">\n                    Random character for today!<br />\n                    Do you want to get to know him better?\n                </p>\n                <p className=\"randomchar__title\">\n                    Or choose another one\n                </p>\n                <button onClick={updateChare} className=\"button button__main\">\n                    <div className=\"inner\">try it</div>\n                </button>\n                <img src={mjolnir} alt=\"mjolnir\" className=\"randomchar__decoration\" />\n            </div>\n        </div>\n    )\n\n\n\n\n}\n\nconst View = ({ char }) => {\n    const { name, descr, thumbnail, homepage, wiki } = char;\n\n    const linkImgNotFound = 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg';\n    const styleImgNotFound = thumbnail === linkImgNotFound ? { objectFit: 'contain' } : null\n    return (\n        <div className=\"randomchar__block\">\n            <img src={thumbnail} alt=\"Random character\" className=\"randomchar__img\" style={styleImgNotFound} />\n            <div className=\"randomchar__info\">\n                <p className=\"randomchar__name\">{name}</p>\n                <p className=\"randomchar__descr\">{descr}</p>\n                <div className=\"randomchar__btns\">\n                    <a href={homepage} className=\"button button__main\">\n                        <div className=\"inner\">homepage</div>\n                    </a>\n                    <a href={wiki} className=\"button button__secondary\">\n                        <div className=\"inner\">Wiki</div>\n                    </a>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default RandomChar;","\nimport {useState, useEffect, useRef} from 'react';\nimport PropTypes from 'prop-types';\nimport {CSSTransition, TransitionGroup} from 'react-transition-group';\n\nimport useMarvelService from '../../services/MarvelService';\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\n\nimport './charList.scss';\n\nconst CharList = (props) => {\n\n    const [charList, setCharList] = useState([]);\n    const [newItemLoading, setnewItemLoading] = useState(false);\n    const [offset, setOffset] = useState(210);\n    const [charEnded, setCharEnded] = useState(false);\n    \n    const {loading, error, getAllCharacters} = useMarvelService();\n\n    useEffect(() => {\n        onRequest(offset, true);\n    }, [])\n\n    const onRequest = (offset, initial) => {\n        initial ? setnewItemLoading(false) : setnewItemLoading(true);\n        getAllCharacters(offset)\n            .then(onCharListLoaded)\n    }\n\n    const onCharListLoaded = async(newCharList) => {\n        let ended = false;\n        if (newCharList.length < 9) {\n            ended = true;\n        }\n        setCharList([...charList, ...newCharList]);\n        setnewItemLoading(false);\n        setOffset(offset + 9);\n        setCharEnded(ended);\n    }\n\n    const itemRefs = useRef([]);\n\n    const focusOnItem = (id) => {\n        itemRefs.current.forEach(item => item.classList.remove('char__item_selected'));\n        itemRefs.current[id].classList.add('char__item_selected');\n        itemRefs.current[id].focus();\n    }\n\n    function renderItems (arr){\n        const items =  arr.map((item, i) => {\n            let imgStyle = {'objectFit' : 'cover'};\n            if (item.thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n                imgStyle = {'objectFit' : 'unset'};\n            }\n            \n            return (\n                <CSSTransition key={item.id} timeout={500} classNames=\"char__item\">\n                    <li \n                        className=\"char__item\"\n                        tabIndex={0}\n                        ref={el => itemRefs.current[i] = el}\n                        onClick={() => {\n                            props.onCharSelected(item.id);\n                            focusOnItem(i);\n                        }}\n                        onKeyPress={(e) => {\n                            if (e.key === ' ' || e.key === \"Enter\") {\n                                props.onCharSelected(item.id);\n                                focusOnItem(i);\n                            }\n                        }}>\n                            <img src={item.thumbnail} alt={item.name} style={imgStyle}/>\n                            <div className=\"char__name\">{item.name}</div>\n                    </li>\n                </CSSTransition>\n            )\n        });\n\n        return (\n            <ul className=\"char__grid\">\n                <TransitionGroup component={null}>\n                    {items}\n                </TransitionGroup>\n            </ul>\n        )\n    }\n    \n    const items = renderItems(charList);\n\n    const errorMessage = error ? <ErrorMessage/> : null;\n    const spinner = loading && !newItemLoading ? <Spinner/> : null;\n\n    return (\n        <div className=\"char__list\">\n            {errorMessage}\n            {spinner}\n            {items}\n            <button \n                disabled={newItemLoading} \n                style={{'display' : charEnded ? 'none' : 'block'}}\n                className=\"button button__main button__long\"\n                onClick={() => onRequest(offset)}>\n                <div className=\"inner\">load more</div>\n            </button>\n        </div>\n    )\n}\n\nCharList.propTypes = {\n    onCharSelected: PropTypes.func.isRequired\n}\n\nexport default CharList;\n","import './skeleton.scss';\n\nconst Skeleton = () => {\n    return (\n        <>\n            <p className=\"char__select\">Please select a character to see information</p>\n            <div className=\"skeleton\">\n                <div className=\"pulse skeleton__header\">\n                    <div className=\"pulse skeleton__circle\"></div>\n                    <div className=\"pulse skeleton__mini\"></div>\n                </div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n            </div>\n        </>\n    )\n}\n\nexport default Skeleton;","import { useState, useEffect } from 'react';\nimport './charInfo.scss';\n\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport Skeleton from '../skeleton/Skeleton'\nimport useMarvelService from '../../services/MarvelService';\n\nconst CharInfo = (props) => {\n\n    const [char, setChar] = useState(null);\n\n    const { loading, error, getCharacter, clearError } = useMarvelService();\n\n    useEffect(() => {\n        updateChare();\n    }, [props.charId]);\n\n\n    const onCharLoaded = (char) => {\n        setChar(char);\n    };\n\n    function updateChare() {\n        const { charId } = props;\n        if (!charId) {\n            return;\n        }\n        clearError();\n        getCharacter(charId)\n            .then(onCharLoaded)\n    }\n\n    const skeleton = char || loading || error ? null : <Skeleton />\n    const errorMessage = error ? <ErrorMessage /> : null;\n    const spinner = loading ? <Spinner /> : null;\n    const content = !(loading || error || !char) ? <View char={char} /> : null;\n\n    return (\n        <div className=\"char__info\" >\n            {skeleton}\n            {errorMessage}\n            {spinner}\n            {content}\n        </div>\n    )\n}\n\nconst View = ({ char }) => {\n\n    const { name, descr, thumbnail, homepage, wiki, comics } = char;\n\n    const linkImgNotFound = 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg';\n    const styleImgNotFound = thumbnail === linkImgNotFound ? { objectFit: 'contain' } : null;\n\n    return (\n        <>\n            <div className=\"char__basics\">\n                <img src={thumbnail} alt={name} style={styleImgNotFound} />\n                <div>\n                    <div className=\"char__info-name\">{name}</div>\n                    <div className=\"char__btns\">\n                        <a href={homepage} className=\"button button__main\">\n                            <div className=\"inner\">homepage</div>\n                        </a>\n                        <a href={wiki} className=\"button button__secondary\">\n                            <div className=\"inner\">Wiki</div>\n                        </a>\n                    </div>\n                </div>\n            </div>\n            <div className=\"char__descr\">\n                {descr}\n            </div>\n            <div className=\"char__comics\">Comics:</div>\n            <ul className=\"char__comics-list\">\n                {comics.length > 0 ? null : 'There is no comics whith this character'}\n                {\n                    comics.map((item, i) => {\n                        if (i > 9) return;\n                        return (\n                            <li key={i} className=\"char__comics-item\">\n                                {item.name}\n                            </li>\n                        )\n                    })\n                }\n\n            </ul>\n        </>\n    )\n}\n\nexport default CharInfo;","import { Component } from \"react\";\r\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\r\n\r\nclass ErrorBoundary extends Component {\r\n   state = {\r\n      error: false\r\n   }\r\n\r\n   componentDidCatch(error, errorInfo) {\r\n      this.setState({\r\n         error: true\r\n      })\r\n   }\r\n\r\n   render() {\r\n      if(this.state.true) {\r\n         return <ErrorMessage/>\r\n      }\r\n\r\n      return this.props.children;\r\n   }\r\n}\r\n\r\nexport default ErrorBoundary;","import { useState } from 'react';\r\nimport { Formik, Form, Field, ErrorMessage as FormikErrorMessage } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport useMarvelService from '../../services/MarvelService';\r\nimport ErrorMessage from '../errorMessage/ErrorMessage';\r\n\r\nimport '../charSearchForm/charSearchForm.scss'\r\n\r\nconst CharSearchForm = () => {\r\n    const [char, setChar] = useState(null);\r\n    console.log(char)\r\n    const { loading, error, getCharacterByName, clearError } = useMarvelService();\r\n\r\n    const onCharLoaded = (char) => {\r\n        setChar(char);\r\n    }\r\n\r\n    const updateChar = (name) => {\r\n        clearError();\r\n\r\n        getCharacterByName(name)\r\n            .then(onCharLoaded)\r\n\r\n    }\r\n\r\n    const errorMessage = error ? <div className=\"char__search-critical-error\"><ErrorMessage /></div> : null;\r\n    const results = !char ? null : char.length > 0 ?\r\n        <div className=\"char__search-wrapper\">\r\n            <div className=\"char__search-success\">There is! Visit {char[0].name} page?</div>\r\n            <Link to={`/characters/${char[0].id}`} className=\"button button__secondary\">\r\n                <div className=\"inner\">To page</div>\r\n            </Link>\r\n        </div> :\r\n        <div className=\"char__search-error\">\r\n            The character was not found. Check the name and try again\r\n        </div>;\r\n\r\n    return (\r\n        <div className=\"char__search-form\">\r\n            <Formik\r\n                initialValues={{\r\n                    charName: ''\r\n                }}\r\n                validationSchema={Yup.object({\r\n                    charName: Yup.string().required('This field is required')\r\n                })}\r\n                onSubmit={({ charName }) => {\r\n                    updateChar(charName);\r\n                }}\r\n            >\r\n                <Form>\r\n                    <label className=\"char__search-label\" htmlFor=\"charName\">Or find a character by name:</label>\r\n                    <p className=\"char__search-subtext\">For example: Abyss, Thor ...</p>\r\n                    <div className=\"char__search-wrapper\">\r\n                        <Field\r\n                            id=\"charName\"\r\n                            name='charName'\r\n                            type='text'\r\n                            placeholder=\"Enter name\" />\r\n                        <button\r\n                            type='submit'\r\n                            className=\"button button__main\"\r\n                            disabled={loading}>\r\n                            <div className=\"inner\">find</div>\r\n                        </button>\r\n                    </div>\r\n                    <FormikErrorMessage component=\"div\" className=\"char__search-error\" name=\"charName\" />\r\n                </Form>\r\n            </Formik>\r\n            {results}\r\n            {errorMessage}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CharSearchForm;","export default __webpack_public_path__ + \"static/media/vision.067d4ae1.png\";","import { useState } from \"react\";\r\n\r\nimport RandomChar from \"../randomChar/RandomChar\";\r\nimport CharList from \"../charList/CharList\";\r\nimport CharInfo from \"../charInfo/CharInfo\";\r\nimport ErrorBoundary from \"../errorBoundary/ErrorBoundary\";\r\nimport CharSearchForm from \"../charSearchForm/CharSearchForm\";\r\nimport decoration from '../../resources/img/vision.png';\r\n\r\nconst MainPage = () => {\r\n\r\n   const [selectedChar, setChar] = useState(null);\r\n\r\n   const onCharSelected = (id) => {\r\n      setChar(id);\r\n   }\r\n\r\n   return (\r\n      <>\r\n         <ErrorBoundary>\r\n            <RandomChar />\r\n         </ErrorBoundary>\r\n         <div className=\"char__content\">\r\n            <ErrorBoundary>\r\n               <CharList onCharSelected={onCharSelected} />\r\n            </ErrorBoundary>\r\n            <div>\r\n               <ErrorBoundary>\r\n                  <CharInfo charId={selectedChar} />\r\n               </ErrorBoundary>\r\n               <ErrorBoundary>\r\n                  <CharSearchForm />\r\n               </ErrorBoundary>\r\n            </div>\r\n         </div>\r\n         <img className=\"bg-decoration\" src={decoration} alt=\"vision\" />\r\n      </>\r\n   )\r\n}\r\n\r\nexport default MainPage;\r\n","export default __webpack_public_path__ + \"static/media/error.42292aa1.gif\";","import errorImg from './error.gif'\r\n\r\nconst ErrorMessage = () => {\r\n   return (\r\n      <img style={{ display: 'block', width: \"250px\", height: \"250px\",objectFit: 'contain', margin: \"0 auto\"}} src={errorImg} alt='errorImg'/>\r\n   )\r\n}\r\n\r\nexport default ErrorMessage;","import { useHttp } from '../hooks/http.hook';\r\n\r\nconst useMarvelService = () => {\r\n   const { loading, request, error, clearError } = useHttp();\r\n\r\n   const _apiBase = 'https://gateway.marvel.com:443/v1/public/';\r\n   const _apiKey = 'apikey=220591549b2bc1f3b59a0607ea3b399e';\r\n   const _baseOffset = 210;\r\n\r\n   const getAllCharacters = async (offset = _baseOffset) => {\r\n      const res = await request(`${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`);\r\n      return res.data.results.map(_transformCharacter);\r\n   }\r\n\r\n   const getCharacter = async (id) => {\r\n      const res = await request(`${_apiBase}characters/${id}?${_apiKey}`);\r\n      return _transformCharacter(res.data.results[0]);\r\n   }\r\n\r\n   const getCharacterByName = async (name) => {\r\n\t\tconst res = await request(`${_apiBase}characters?name=${name}&${_apiKey}`);\r\n\t\treturn res.data.results.map(_transformCharacter);\r\n\t};\r\n\r\n   const getAllComics = async (offset = 0) => {\r\n      const res = await request(`${_apiBase}comics?orderBy=issueNumber&limit=8&offset=${offset}&${_apiKey}`);\r\n      return res.data.results.map(_transformComics);\r\n   }\r\n\r\n   const getComic = async (id) => {\r\n      const res = await request(`${_apiBase}comics/${id}?${_apiKey}`);\r\n      return _transformComics(res.data.results[0]);\r\n   }\r\n\r\n   const _transformCharacter = (char) => {\r\n      return {\r\n         id: char.id,\r\n         name: char.name,\r\n         description: char.description ? `${char.description.slice(0, 210)}...` : 'There is no description for this character',\r\n         thumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\r\n         homepage: char.urls[0].url,\r\n         wiki: char.urls[1].url,\r\n         comics: char.comics.items\r\n      }\r\n   }\r\n\r\n   const _transformComics = (comics) => {\r\n      return {\r\n         id: comics.id,\r\n         title: comics.title,\r\n         description: comics.description || 'There is no description',\r\n         pageCount: comics.pageCount ? `${comics.pageCount} p.` : 'No information about the number of pages',\r\n         thumbnail: comics.thumbnail.path + '.' + comics.thumbnail.extension,\r\n         language: comics.textObjects.language || 'en-us',\r\n         price: comics.prices.price ? `${comics.prices.price}$` : 'not available'\r\n      }\r\n   }\r\n\r\n   return { loading, error, clearError, getAllCharacters, getCharacter, getAllComics, getComic,getCharacterByName }\r\n}\r\n\r\nexport default useMarvelService;","import { useState, useCallback } from \"react\";\r\n\r\nexport const useHttp = () => {\r\n   const [loading, setLoading] = useState(false);\r\n   const [error, setError] = useState(null);\r\n\r\n   const request = useCallback(async (url, method = 'GET', body = null, headers = { 'Content-Type': 'application/json' }) => {\r\n\r\n      setLoading(true);\r\n\r\n      try {\r\n         const response = await fetch(url, { method, body, headers });\r\n\r\n         if (!response.ok) {\r\n            throw new Error(`Could not fetch ${url}, status: ${response.status}`);\r\n         }\r\n\r\n         const data = await response.json();\r\n\r\n         setLoading(false);\r\n         return data;\r\n      } catch (e) {\r\n         setLoading(false);\r\n         setError(e.message);\r\n         console.log(e);\r\n         throw e;\r\n      }\r\n   }, []);\r\n\r\n   const clearError = useCallback(() => setError(null), []);\r\n\r\n   return { loading, request, error, clearError }\r\n}"],"sourceRoot":""}